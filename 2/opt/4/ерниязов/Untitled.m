clc;
y = [0 2 1 2; 1 0 1 1; 4 1 0 1; 1 1 0 0]; % матрица трафика
n = [0 2 1 3; 2 0 1 3; 2 4 0 3; 2 4 1 0]; % матрица маршрутов
C = 34; % полная пропускная способность
u = 1;

coef_p = ((sum(sum(y)))*u/C); % коэффициент загрузки (отношение внешнего траффика в битах от суммарной пропускной способности)

% Интенсивности потока
L_i = [(y(1,3)+y(1,4)+y(3,2)+y(4,2)+y(3,4));
    (y(1,3)+y(1,4)+y(2,1)+y(2,3)+y(3,4));
    (y(2,1)+y(3,2)+y(3,4)+y(4,1)+y(4,2));
    (y(1,3)+y(2,1)+y(2,3)+y(4,1)+y(4,2))];

Y = sum(sum(y)); % внешний трафик поступающий в сеть
lam = sum (sum (L_i)); % полный трафик в сети
n_ = lam/Y; % средняя длина пути


% Задача выбора пропускных способностей
C_i = L_i + C*(1-n_*coef_p)*((L_i.^0.5)/sum(L_i.^0.5));
% Оптимальное значение задержки
T = n_*(sum((L_i/(sum(L_i))).^0.5)^2)/(C*u*(1-n_*coef_p));

% Ддины каналов
l_i = C_i./(Y*(C_i - L_i).^2);


%% Нахождение кратчайших маршрутов из узла в узел с использованием алгоритма Флойда
R = [Inf   2   1   3;
       2 Inf   1   3;
       2   4 Inf   3;
       2   4   1 Inf];
   
D = [  0 Inf Inf Inf;
     Inf   0 Inf Inf;
     Inf Inf   0 Inf;
     Inf Inf Inf   0];
 
% Траектории 
p = cell(4);

for i = 1:4
    for j = 1:4
        b = R(i, j);
        if b ~= Inf
            D(j, b) = 1;
            p{j, b} = [b];
        end
    end 
end

for k = 1:4
    for i = 1:4
        for j = 1:4
            new_d = D(i, k) + D(k, j);  
            if new_d < D(i, j)
                D(i, j) = new_d;
                p{i, j} = [p{i, k}, p{k, j}];   
            end
        end
     end
end

% Алгоритм флойда
D = [  0       9.1366  Inf     Inf;
       Inf     0  Inf     9.1366;
       7.8634  Inf     0       Inf ;
       Inf     Inf     7.8634  0;];
   
prevD = D;
 
for k = 1:length(D)
  D = min(D,D(:,k) + D(k,:));
  prevD = D;
end
    
% Пропускные способности для случая пропорционального выбора 
C_i_proporz = (L_i/lam)*C;
% Средняя задержка для случая пропорционального выбора
T_proporz = sum((L_i/Y./(C_i_proporz-L_i)));

%% Форматированый вывод
fprintf('Коэффициент загрузки: %4.4f \n',coef_p)
fprintf('Интенсивности потока:\n')
fprintf('%d\n', L_i)
fprintf('Внешний трафик поступающий в сеть: %4.4f \n',Y);
fprintf('Полный трафик в сети: %4.4f \n',lam)
fprintf('Cредняя длина пути: %4.4f \n',n_)
fprintf('Пропускные способности:\n')
fprintf('%4.4f\n', C_i)
fprintf('Оптимальное значение задержки: %4.4f \n',T)
fprintf('Ддины каналов:\n')
fprintf('%4.4f\n',l_i)
fprintf('Матрица длин маршрутов:\n')
fprintf('%4.4f %4.4f %4.4f %4.4f \n', D.')
fprintf('Матрица с путем:\n')
for ii = 1:4
    for jj = 1:4
        pp = p{ii, jj};
        fprintf('[');
        for k = 1:3
            if k <= size(pp, 2)
                fprintf('%d', pp(k));
            else
                fprintf(' ');
            end
            if k < 3
                fprintf(' ');
            end
        end
        fprintf('] ');
    end
    fprintf('\n');
end    
fprintf('Пропускные способности для случая пропорционального выбора :\n')
fprintf('%4.4f\n', C_i_proporz)
fprintf('Оптимальное значение задержки для случая пропорционального выбора : %4.4f \n',T_proporz)
