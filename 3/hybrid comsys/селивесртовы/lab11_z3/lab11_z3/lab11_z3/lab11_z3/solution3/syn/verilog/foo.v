// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="foo,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=65,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=84,HLS_SYN_LUT=89,HLS_VERSION=2018_2}" *)

module foo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        d_in_address0,
        d_in_ce0,
        d_in_q0,
        d_out_address0,
        d_out_ce0,
        d_out_we0,
        d_out_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] d_in_address0;
output   d_in_ce0;
input  [31:0] d_in_q0;
output  [3:0] d_out_address0;
output   d_out_ce0;
output   d_out_we0;
output  [31:0] d_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg d_in_ce0;
reg d_out_ce0;
reg d_out_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_1_fu_77_p2;
reg   [4:0] i_1_reg_95;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_fu_83_p1;
reg   [63:0] tmp_reg_100;
wire   [0:0] exitcond_fu_71_p2;
reg  signed [31:0] t_in_reg_110;
wire    ap_CS_fsm_state3;
wire   [31:0] t_r_fu_88_p2;
reg   [31:0] t_r_reg_116;
wire    ap_CS_fsm_state4;
reg   [4:0] i_reg_60;
wire    ap_CS_fsm_state5;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_60 <= i_1_reg_95;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_60 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_95 <= i_1_fu_77_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        t_in_reg_110 <= d_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        t_r_reg_116 <= t_r_fu_88_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_71_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_100[4 : 0] <= tmp_fu_83_p1[4 : 0];
    end
end

always @ (*) begin
    if (((exitcond_fu_71_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_71_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        d_in_ce0 = 1'b1;
    end else begin
        d_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        d_out_ce0 = 1'b1;
    end else begin
        d_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        d_out_we0 = 1'b1;
    end else begin
        d_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_71_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign d_in_address0 = tmp_fu_83_p1;

assign d_out_address0 = tmp_reg_100;

assign d_out_d0 = t_r_reg_116;

assign exitcond_fu_71_p2 = ((i_reg_60 == 5'd16) ? 1'b1 : 1'b0);

assign i_1_fu_77_p2 = (i_reg_60 + 5'd1);

assign t_r_fu_88_p2 = ($signed(t_in_reg_110) * $signed(t_in_reg_110));

assign tmp_fu_83_p1 = i_reg_60;

always @ (posedge ap_clk) begin
    tmp_reg_100[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //foo
