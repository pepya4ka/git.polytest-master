// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "lab4_1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic lab4_1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic lab4_1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> lab4_1::ap_ST_fsm_state1 = "1";
const sc_lv<4> lab4_1::ap_ST_fsm_state2 = "10";
const sc_lv<4> lab4_1::ap_ST_fsm_state3 = "100";
const sc_lv<4> lab4_1::ap_ST_fsm_state4 = "1000";
const sc_lv<32> lab4_1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> lab4_1::ap_const_lv32_3 = "11";
const sc_lv<32> lab4_1::ap_const_lv32_2 = "10";
const bool lab4_1::ap_const_boolean_1 = true;

lab4_1::lab4_1(sc_module_name name) : sc_module(name), mVcdFile(0) {
    lab4_1_mul_32s_32bkb_U1 = new lab4_1_mul_32s_32bkb<1,3,32,32,32>("lab4_1_mul_32s_32bkb_U1");
    lab4_1_mul_32s_32bkb_U1->clk(ap_clk);
    lab4_1_mul_32s_32bkb_U1->reset(ap_rst);
    lab4_1_mul_32s_32bkb_U1->din0(b);
    lab4_1_mul_32s_32bkb_U1->din1(a);
    lab4_1_mul_32s_32bkb_U1->ce(grp_fu_69_ce);
    lab4_1_mul_32s_32bkb_U1->dout(grp_fu_69_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_ap_ack);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( a_ap_vld );
    sensitive << ( c_ap_vld );
    sensitive << ( d_ap_vld_in_sig );

    SC_METHOD(thread_a_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( a_ap_vld );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( a_ap_vld );
    sensitive << ( c_ap_vld );
    sensitive << ( d_ap_vld_in_sig );

    SC_METHOD(thread_ap_done);
    sensitive << ( p_y_ap_ack );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( p_y_ap_ack );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_return);
    sensitive << ( p_y_ap_ack );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( c_read_reg_94 );
    sensitive << ( mul_ln3_reg_104 );

    SC_METHOD(thread_b_ap_ack);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( a_ap_vld );
    sensitive << ( c_ap_vld );
    sensitive << ( d_ap_vld_in_sig );

    SC_METHOD(thread_c_ap_ack);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( a_ap_vld );
    sensitive << ( c_ap_vld );
    sensitive << ( d_ap_vld_in_sig );

    SC_METHOD(thread_c_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( c_ap_vld );

    SC_METHOD(thread_d_ap_vld_in_sig);
    sensitive << ( d_ap_vld );
    sensitive << ( d_ap_vld_preg );

    SC_METHOD(thread_d_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( d_ap_vld );

    SC_METHOD(thread_d_in_sig);
    sensitive << ( d );
    sensitive << ( d_preg );
    sensitive << ( d_ap_vld );

    SC_METHOD(thread_grp_fu_69_ce);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( a_ap_vld );
    sensitive << ( c_ap_vld );
    sensitive << ( d_ap_vld_in_sig );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_p_y);
    sensitive << ( d_in_sig );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( mul_ln3_reg_104 );

    SC_METHOD(thread_p_y_blk_n);
    sensitive << ( p_y_ap_ack );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( a_ap_vld );
    sensitive << ( c_ap_vld );
    sensitive << ( d_ap_vld_in_sig );
    sensitive << ( p_y_ap_ack );
    sensitive << ( ap_CS_fsm_state4 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    d_preg = "00000000000000000000000000000000";
    d_ap_vld_preg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "lab4_1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a, "(port)a");
    sc_trace(mVcdFile, a_ap_vld, "(port)a_ap_vld");
    sc_trace(mVcdFile, a_ap_ack, "(port)a_ap_ack");
    sc_trace(mVcdFile, b, "(port)b");
    sc_trace(mVcdFile, b_ap_ack, "(port)b_ap_ack");
    sc_trace(mVcdFile, c, "(port)c");
    sc_trace(mVcdFile, c_ap_vld, "(port)c_ap_vld");
    sc_trace(mVcdFile, c_ap_ack, "(port)c_ap_ack");
    sc_trace(mVcdFile, d, "(port)d");
    sc_trace(mVcdFile, d_ap_vld, "(port)d_ap_vld");
    sc_trace(mVcdFile, p_y, "(port)p_y");
    sc_trace(mVcdFile, p_y_ap_ack, "(port)p_y_ap_ack");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, d_preg, "d_preg");
    sc_trace(mVcdFile, d_in_sig, "d_in_sig");
    sc_trace(mVcdFile, d_ap_vld_preg, "d_ap_vld_preg");
    sc_trace(mVcdFile, d_ap_vld_in_sig, "d_ap_vld_in_sig");
    sc_trace(mVcdFile, a_blk_n, "a_blk_n");
    sc_trace(mVcdFile, c_blk_n, "c_blk_n");
    sc_trace(mVcdFile, d_blk_n, "d_blk_n");
    sc_trace(mVcdFile, p_y_blk_n, "p_y_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, c_read_reg_94, "c_read_reg_94");
    sc_trace(mVcdFile, grp_fu_69_p2, "grp_fu_69_p2");
    sc_trace(mVcdFile, mul_ln3_reg_104, "mul_ln3_reg_104");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, grp_fu_69_ce, "grp_fu_69_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("lab4_1.hdltvin.dat");
    mHdltvoutHandle.open("lab4_1.hdltvout.dat");
}

lab4_1::~lab4_1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete lab4_1_mul_32s_32bkb_U1;
}

void lab4_1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        d_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
             esl_seteq<1,1,1>(p_y_ap_ack.read(), ap_const_logic_1))) {
            d_ap_vld_preg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, d_ap_vld.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())))) {
            d_ap_vld_preg = d_ap_vld.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        d_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, d_ap_vld.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())))) {
            d_preg = d.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, a_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, d_ap_vld_in_sig.read())))) {
        c_read_reg_94 = c.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        mul_ln3_reg_104 = grp_fu_69_p2.read();
    }
}

void lab4_1::thread_a_ap_ack() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, a_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, d_ap_vld_in_sig.read())))) {
        a_ap_ack = ap_const_logic_1;
    } else {
        a_ap_ack = ap_const_logic_0;
    }
}

void lab4_1::thread_a_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        a_blk_n = a_ap_vld.read();
    } else {
        a_blk_n = ap_const_logic_1;
    }
}

void lab4_1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void lab4_1::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void lab4_1::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void lab4_1::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, a_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, d_ap_vld_in_sig.read()));
}

void lab4_1::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(p_y_ap_ack.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void lab4_1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void lab4_1::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(p_y_ap_ack.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void lab4_1::thread_ap_return() {
    ap_return = (!c_read_reg_94.read().is_01() || !mul_ln3_reg_104.read().is_01())? sc_lv<32>(): (sc_biguint<32>(c_read_reg_94.read()) + sc_biguint<32>(mul_ln3_reg_104.read()));
}

void lab4_1::thread_b_ap_ack() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, a_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, d_ap_vld_in_sig.read())))) {
        b_ap_ack = ap_const_logic_1;
    } else {
        b_ap_ack = ap_const_logic_0;
    }
}

void lab4_1::thread_c_ap_ack() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, a_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, d_ap_vld_in_sig.read())))) {
        c_ap_ack = ap_const_logic_1;
    } else {
        c_ap_ack = ap_const_logic_0;
    }
}

void lab4_1::thread_c_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        c_blk_n = c_ap_vld.read();
    } else {
        c_blk_n = ap_const_logic_1;
    }
}

void lab4_1::thread_d_ap_vld_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, d_ap_vld.read())) {
        d_ap_vld_in_sig = d_ap_vld.read();
    } else {
        d_ap_vld_in_sig = d_ap_vld_preg.read();
    }
}

void lab4_1::thread_d_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        d_blk_n = d_ap_vld.read();
    } else {
        d_blk_n = ap_const_logic_1;
    }
}

void lab4_1::thread_d_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, d_ap_vld.read())) {
        d_in_sig = d.read();
    } else {
        d_in_sig = d_preg.read();
    }
}

void lab4_1::thread_grp_fu_69_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
           esl_seteq<1,1,1>(ap_const_logic_0, a_ap_vld.read()) || 
           esl_seteq<1,1,1>(ap_const_logic_0, c_ap_vld.read()) || 
           esl_seteq<1,1,1>(ap_const_logic_0, d_ap_vld_in_sig.read()))))) {
        grp_fu_69_ce = ap_const_logic_0;
    } else {
        grp_fu_69_ce = ap_const_logic_1;
    }
}

void lab4_1::thread_p_y() {
    p_y = (!d_in_sig.read().is_01() || !mul_ln3_reg_104.read().is_01())? sc_lv<32>(): (sc_biguint<32>(d_in_sig.read()) + sc_biguint<32>(mul_ln3_reg_104.read()));
}

void lab4_1::thread_p_y_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        p_y_blk_n = p_y_ap_ack.read();
    } else {
        p_y_blk_n = ap_const_logic_1;
    }
}

void lab4_1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, a_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, c_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, d_ap_vld_in_sig.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(p_y_ap_ack.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void lab4_1::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a\" :  \"" << a.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_ap_vld\" :  \"" << a_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_ap_ack\" :  \"" << a_ap_ack.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b\" :  \"" << b.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_ap_ack\" :  \"" << b_ap_ack.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"c\" :  \"" << c.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"c_ap_vld\" :  \"" << c_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_ap_ack\" :  \"" << c_ap_ack.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"d\" :  \"" << d.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"d_ap_vld\" :  \"" << d_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"p_y\" :  \"" << p_y.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"p_y_ap_ack\" :  \"" << p_y_ap_ack.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

