// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _lab4_1_HH_
#define _lab4_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "lab4_1_mul_32s_32bkb.h"

namespace ap_rtl {

struct lab4_1 : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > a;
    sc_in< sc_logic > a_ap_vld;
    sc_out< sc_logic > a_ap_ack;
    sc_in< sc_lv<32> > b;
    sc_out< sc_logic > b_ap_ack;
    sc_in< sc_lv<32> > c;
    sc_in< sc_logic > c_ap_vld;
    sc_out< sc_logic > c_ap_ack;
    sc_in< sc_lv<32> > d;
    sc_in< sc_logic > d_ap_vld;
    sc_out< sc_lv<32> > p_y;
    sc_in< sc_logic > p_y_ap_ack;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    lab4_1(sc_module_name name);
    SC_HAS_PROCESS(lab4_1);

    ~lab4_1();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    lab4_1_mul_32s_32bkb<1,3,32,32,32>* lab4_1_mul_32s_32bkb_U1;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > d_preg;
    sc_signal< sc_lv<32> > d_in_sig;
    sc_signal< sc_logic > d_ap_vld_preg;
    sc_signal< sc_logic > d_ap_vld_in_sig;
    sc_signal< sc_logic > a_blk_n;
    sc_signal< sc_logic > c_blk_n;
    sc_signal< sc_logic > d_blk_n;
    sc_signal< sc_logic > p_y_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > c_read_reg_94;
    sc_signal< sc_lv<32> > grp_fu_69_p2;
    sc_signal< sc_lv<32> > mul_ln3_reg_104;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > grp_fu_69_ce;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_ap_ack();
    void thread_a_blk_n();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_b_ap_ack();
    void thread_c_ap_ack();
    void thread_c_blk_n();
    void thread_d_ap_vld_in_sig();
    void thread_d_blk_n();
    void thread_d_in_sig();
    void thread_grp_fu_69_ce();
    void thread_p_y();
    void thread_p_y_blk_n();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
