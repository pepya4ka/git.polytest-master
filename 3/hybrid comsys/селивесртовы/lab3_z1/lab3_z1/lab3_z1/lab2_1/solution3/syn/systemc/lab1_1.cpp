// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "lab1_1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const bool lab1_1::ap_const_boolean_1 = true;
const sc_logic lab1_1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic lab1_1::ap_const_logic_0 = sc_dt::Log_0;

lab1_1::lab1_1(sc_module_name name) : sc_module(name), mVcdFile(0) {
    lab1_1_mac_muladdbkb_U1 = new lab1_1_mac_muladdbkb<1,1,8,8,9,16>("lab1_1_mac_muladdbkb_U1");
    lab1_1_mac_muladdbkb_U1->din0(b);
    lab1_1_mac_muladdbkb_U1->din1(a);
    lab1_1_mac_muladdbkb_U1->din2(add_ln4_fu_64_p2);
    lab1_1_mac_muladdbkb_U1->dout(grp_fu_77_p3);

    SC_METHOD(thread_add_ln4_fu_64_p2);
    sensitive << ( sext_ln4_2_fu_56_p1 );
    sensitive << ( sext_ln4_3_fu_60_p1 );

    SC_METHOD(thread_ap_return);
    sensitive << ( grp_fu_77_p3 );

    SC_METHOD(thread_sext_ln4_2_fu_56_p1);
    sensitive << ( c );

    SC_METHOD(thread_sext_ln4_3_fu_60_p1);
    sensitive << ( d );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "lab1_1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, a, "(port)a");
    sc_trace(mVcdFile, b, "(port)b");
    sc_trace(mVcdFile, c, "(port)c");
    sc_trace(mVcdFile, d, "(port)d");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, sext_ln4_2_fu_56_p1, "sext_ln4_2_fu_56_p1");
    sc_trace(mVcdFile, sext_ln4_3_fu_60_p1, "sext_ln4_3_fu_60_p1");
    sc_trace(mVcdFile, add_ln4_fu_64_p2, "add_ln4_fu_64_p2");
    sc_trace(mVcdFile, grp_fu_77_p3, "grp_fu_77_p3");
#endif

    }
    mHdltvinHandle.open("lab1_1.hdltvin.dat");
    mHdltvoutHandle.open("lab1_1.hdltvout.dat");
}

lab1_1::~lab1_1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete lab1_1_mac_muladdbkb_U1;
}

void lab1_1::thread_add_ln4_fu_64_p2() {
    add_ln4_fu_64_p2 = (!sext_ln4_2_fu_56_p1.read().is_01() || !sext_ln4_3_fu_60_p1.read().is_01())? sc_lv<9>(): (sc_bigint<9>(sext_ln4_2_fu_56_p1.read()) + sc_bigint<9>(sext_ln4_3_fu_60_p1.read()));
}

void lab1_1::thread_ap_return() {
    ap_return = esl_sext<32,16>(grp_fu_77_p3.read());
}

void lab1_1::thread_sext_ln4_2_fu_56_p1() {
    sext_ln4_2_fu_56_p1 = esl_sext<9,8>(c.read());
}

void lab1_1::thread_sext_ln4_3_fu_60_p1() {
    sext_ln4_3_fu_60_p1 = esl_sext<9,8>(d.read());
}

void lab1_1::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"a\" :  \"" << a.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b\" :  \"" << b.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"c\" :  \"" << c.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"d\" :  \"" << d.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

