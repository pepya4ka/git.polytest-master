// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="foo,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.006000,HLS_SYN_LAT=13,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=31,HLS_SYN_LUT=263,HLS_VERSION=2018_2}" *)

module foo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_we0,
        a_d0,
        a_address1,
        a_ce1,
        a_we1,
        a_d1,
        b_address0,
        b_ce0,
        b_q0,
        b_address1,
        b_ce1,
        b_q1,
        c_address0,
        c_ce0,
        c_q0,
        c_address1,
        c_ce1,
        c_q1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] a_address0;
output   a_ce0;
output   a_we0;
output  [31:0] a_d0;
output  [3:0] a_address1;
output   a_ce1;
output   a_we1;
output  [31:0] a_d1;
output  [3:0] b_address0;
output   b_ce0;
input  [31:0] b_q0;
output  [3:0] b_address1;
output   b_ce1;
input  [31:0] b_q1;
output  [3:0] c_address0;
output   c_ce0;
input  [31:0] c_q0;
output  [3:0] c_address1;
output   c_ce1;
input  [31:0] c_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] a_address0;
reg a_ce0;
reg a_we0;
reg[3:0] a_address1;
reg a_ce1;
reg a_we1;
reg[3:0] b_address0;
reg b_ce0;
reg[3:0] b_address1;
reg b_ce1;
reg[3:0] c_address0;
reg c_ce0;
reg[3:0] c_address1;
reg c_ce1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] tmp_fu_188_p1;
reg   [63:0] tmp_reg_241;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_fu_182_p2;
wire   [3:0] tmp_4_fu_194_p1;
reg   [3:0] tmp_4_reg_256;
wire   [63:0] tmp_s_fu_204_p1;
reg   [63:0] tmp_s_reg_262;
wire   [4:0] i_1_3_fu_210_p2;
reg   [4:0] i_1_3_reg_277;
wire   [63:0] tmp_2_fu_221_p1;
reg   [63:0] tmp_2_reg_282;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_3_fu_232_p1;
reg   [63:0] tmp_3_reg_297;
reg   [4:0] i_reg_157;
wire    ap_CS_fsm_state4;
wire   [3:0] i_1_s_fu_198_p2;
wire   [3:0] i_1_1_fu_216_p2;
wire   [3:0] i_1_2_fu_227_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_157 <= i_1_3_reg_277;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_157 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_182_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_3_reg_277 <= i_1_3_fu_210_p2;
        tmp_4_reg_256 <= tmp_4_fu_194_p1;
        tmp_reg_241[4 : 0] <= tmp_fu_188_p1[4 : 0];
        tmp_s_reg_262[3 : 1] <= tmp_s_fu_204_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_2_reg_282[0] <= tmp_2_fu_221_p1[0];
tmp_2_reg_282[3 : 2] <= tmp_2_fu_221_p1[3 : 2];
        tmp_3_reg_297[3 : 2] <= tmp_3_fu_232_p1[3 : 2];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_address0 = tmp_2_reg_282;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_address0 = tmp_reg_241;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_address1 = tmp_3_reg_297;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_address1 = tmp_s_reg_262;
    end else begin
        a_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        a_ce1 = 1'b1;
    end else begin
        a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        a_we0 = 1'b1;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        a_we1 = 1'b1;
    end else begin
        a_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_182_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_182_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_address0 = tmp_2_fu_221_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        b_address0 = tmp_fu_188_p1;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_address1 = tmp_3_fu_232_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        b_address1 = tmp_s_fu_204_p1;
    end else begin
        b_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        b_ce1 = 1'b1;
    end else begin
        b_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_address0 = tmp_2_fu_221_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        c_address0 = tmp_fu_188_p1;
    end else begin
        c_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_address1 = tmp_3_fu_232_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        c_address1 = tmp_s_fu_204_p1;
    end else begin
        c_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        c_ce1 = 1'b1;
    end else begin
        c_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_182_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_d0 = (c_q0 + b_q0);

assign a_d1 = (c_q1 + b_q1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign exitcond_fu_182_p2 = ((i_reg_157 == 5'd16) ? 1'b1 : 1'b0);

assign i_1_1_fu_216_p2 = (tmp_4_reg_256 | 4'd2);

assign i_1_2_fu_227_p2 = (tmp_4_reg_256 | 4'd3);

assign i_1_3_fu_210_p2 = (5'd4 + i_reg_157);

assign i_1_s_fu_198_p2 = (tmp_4_fu_194_p1 | 4'd1);

assign tmp_2_fu_221_p1 = i_1_1_fu_216_p2;

assign tmp_3_fu_232_p1 = i_1_2_fu_227_p2;

assign tmp_4_fu_194_p1 = i_reg_157[3:0];

assign tmp_fu_188_p1 = i_reg_157;

assign tmp_s_fu_204_p1 = i_1_s_fu_198_p2;

always @ (posedge ap_clk) begin
    tmp_reg_241[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    tmp_s_reg_262[0] <= 1'b1;
    tmp_s_reg_262[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_2_reg_282[1] <= 1'b1;
    tmp_2_reg_282[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_3_reg_297[1:0] <= 2'b11;
    tmp_3_reg_297[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //foo
