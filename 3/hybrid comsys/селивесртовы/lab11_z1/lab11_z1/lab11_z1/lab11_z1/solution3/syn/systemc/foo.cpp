// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "foo.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic foo::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic foo::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> foo::ap_ST_fsm_state1 = "1";
const sc_lv<4> foo::ap_ST_fsm_state2 = "10";
const sc_lv<4> foo::ap_ST_fsm_state3 = "100";
const sc_lv<4> foo::ap_ST_fsm_state4 = "1000";
const sc_lv<32> foo::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> foo::ap_const_lv32_1 = "1";
const sc_lv<1> foo::ap_const_lv1_0 = "0";
const sc_lv<32> foo::ap_const_lv32_2 = "10";
const sc_lv<5> foo::ap_const_lv5_0 = "00000";
const sc_lv<32> foo::ap_const_lv32_3 = "11";
const sc_lv<5> foo::ap_const_lv5_10 = "10000";
const sc_lv<4> foo::ap_const_lv4_1 = "1";
const sc_lv<5> foo::ap_const_lv5_4 = "100";
const sc_lv<4> foo::ap_const_lv4_2 = "10";
const sc_lv<4> foo::ap_const_lv4_3 = "11";
const sc_lv<1> foo::ap_const_lv1_1 = "1";
const bool foo::ap_const_boolean_1 = true;

foo::foo(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_address0);
    sensitive << ( tmp_reg_241 );
    sensitive << ( tmp_2_reg_282 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_a_address1);
    sensitive << ( tmp_s_reg_262 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_3_reg_297 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_a_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_a_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_a_d0);
    sensitive << ( b_q0 );
    sensitive << ( c_q0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_a_d1);
    sensitive << ( b_q1 );
    sensitive << ( c_q1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_a_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_a_we1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_182_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_182_p2 );

    SC_METHOD(thread_b_address0);
    sensitive << ( tmp_fu_188_p1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_2_fu_221_p1 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_b_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_s_fu_204_p1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_3_fu_232_p1 );

    SC_METHOD(thread_b_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_b_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_c_address0);
    sensitive << ( tmp_fu_188_p1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_2_fu_221_p1 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_c_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_s_fu_204_p1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_3_fu_232_p1 );

    SC_METHOD(thread_c_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_c_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_exitcond_fu_182_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_157 );

    SC_METHOD(thread_i_1_1_fu_216_p2);
    sensitive << ( tmp_4_reg_256 );

    SC_METHOD(thread_i_1_2_fu_227_p2);
    sensitive << ( tmp_4_reg_256 );

    SC_METHOD(thread_i_1_3_fu_210_p2);
    sensitive << ( i_reg_157 );

    SC_METHOD(thread_i_1_s_fu_198_p2);
    sensitive << ( tmp_4_fu_194_p1 );

    SC_METHOD(thread_tmp_2_fu_221_p1);
    sensitive << ( i_1_1_fu_216_p2 );

    SC_METHOD(thread_tmp_3_fu_232_p1);
    sensitive << ( i_1_2_fu_227_p2 );

    SC_METHOD(thread_tmp_4_fu_194_p1);
    sensitive << ( i_reg_157 );

    SC_METHOD(thread_tmp_fu_188_p1);
    sensitive << ( i_reg_157 );

    SC_METHOD(thread_tmp_s_fu_204_p1);
    sensitive << ( i_1_s_fu_198_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_182_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "foo_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_address0, "(port)a_address0");
    sc_trace(mVcdFile, a_ce0, "(port)a_ce0");
    sc_trace(mVcdFile, a_we0, "(port)a_we0");
    sc_trace(mVcdFile, a_d0, "(port)a_d0");
    sc_trace(mVcdFile, a_address1, "(port)a_address1");
    sc_trace(mVcdFile, a_ce1, "(port)a_ce1");
    sc_trace(mVcdFile, a_we1, "(port)a_we1");
    sc_trace(mVcdFile, a_d1, "(port)a_d1");
    sc_trace(mVcdFile, b_address0, "(port)b_address0");
    sc_trace(mVcdFile, b_ce0, "(port)b_ce0");
    sc_trace(mVcdFile, b_q0, "(port)b_q0");
    sc_trace(mVcdFile, b_address1, "(port)b_address1");
    sc_trace(mVcdFile, b_ce1, "(port)b_ce1");
    sc_trace(mVcdFile, b_q1, "(port)b_q1");
    sc_trace(mVcdFile, c_address0, "(port)c_address0");
    sc_trace(mVcdFile, c_ce0, "(port)c_ce0");
    sc_trace(mVcdFile, c_q0, "(port)c_q0");
    sc_trace(mVcdFile, c_address1, "(port)c_address1");
    sc_trace(mVcdFile, c_ce1, "(port)c_ce1");
    sc_trace(mVcdFile, c_q1, "(port)c_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_fu_188_p1, "tmp_fu_188_p1");
    sc_trace(mVcdFile, tmp_reg_241, "tmp_reg_241");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond_fu_182_p2, "exitcond_fu_182_p2");
    sc_trace(mVcdFile, tmp_4_fu_194_p1, "tmp_4_fu_194_p1");
    sc_trace(mVcdFile, tmp_4_reg_256, "tmp_4_reg_256");
    sc_trace(mVcdFile, tmp_s_fu_204_p1, "tmp_s_fu_204_p1");
    sc_trace(mVcdFile, tmp_s_reg_262, "tmp_s_reg_262");
    sc_trace(mVcdFile, i_1_3_fu_210_p2, "i_1_3_fu_210_p2");
    sc_trace(mVcdFile, i_1_3_reg_277, "i_1_3_reg_277");
    sc_trace(mVcdFile, tmp_2_fu_221_p1, "tmp_2_fu_221_p1");
    sc_trace(mVcdFile, tmp_2_reg_282, "tmp_2_reg_282");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_3_fu_232_p1, "tmp_3_fu_232_p1");
    sc_trace(mVcdFile, tmp_3_reg_297, "tmp_3_reg_297");
    sc_trace(mVcdFile, i_reg_157, "i_reg_157");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_1_s_fu_198_p2, "i_1_s_fu_198_p2");
    sc_trace(mVcdFile, i_1_1_fu_216_p2, "i_1_1_fu_216_p2");
    sc_trace(mVcdFile, i_1_2_fu_227_p2, "i_1_2_fu_227_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("foo.hdltvin.dat");
    mHdltvoutHandle.open("foo.hdltvout.dat");
}

foo::~foo() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void foo::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_reg_157 = i_1_3_reg_277.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        i_reg_157 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_182_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        i_1_3_reg_277 = i_1_3_fu_210_p2.read();
        tmp_4_reg_256 = tmp_4_fu_194_p1.read();
        tmp_reg_241 = tmp_fu_188_p1.read();
        tmp_s_reg_262 = tmp_s_fu_204_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_2_reg_282 = tmp_2_fu_221_p1.read();
        tmp_3_reg_297 = tmp_3_fu_232_p1.read();
    }
}

void foo::thread_a_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        a_address0 =  (sc_lv<4>) (tmp_2_reg_282.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        a_address0 =  (sc_lv<4>) (tmp_reg_241.read());
    } else {
        a_address0 = "XXXX";
    }
}

void foo::thread_a_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        a_address1 =  (sc_lv<4>) (tmp_3_reg_297.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        a_address1 =  (sc_lv<4>) (tmp_s_reg_262.read());
    } else {
        a_address1 = "XXXX";
    }
}

void foo::thread_a_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        a_ce0 = ap_const_logic_1;
    } else {
        a_ce0 = ap_const_logic_0;
    }
}

void foo::thread_a_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        a_ce1 = ap_const_logic_1;
    } else {
        a_ce1 = ap_const_logic_0;
    }
}

void foo::thread_a_d0() {
    a_d0 = (!c_q0.read().is_01() || !b_q0.read().is_01())? sc_lv<32>(): (sc_biguint<32>(c_q0.read()) + sc_biguint<32>(b_q0.read()));
}

void foo::thread_a_d1() {
    a_d1 = (!c_q1.read().is_01() || !b_q1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(c_q1.read()) + sc_biguint<32>(b_q1.read()));
}

void foo::thread_a_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        a_we0 = ap_const_logic_1;
    } else {
        a_we0 = ap_const_logic_0;
    }
}

void foo::thread_a_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        a_we1 = ap_const_logic_1;
    } else {
        a_we1 = ap_const_logic_0;
    }
}

void foo::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void foo::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void foo::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void foo::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void foo::thread_ap_done() {
    if ((esl_seteq<1,1,1>(exitcond_fu_182_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void foo::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void foo::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(exitcond_fu_182_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void foo::thread_b_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        b_address0 =  (sc_lv<4>) (tmp_2_fu_221_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        b_address0 =  (sc_lv<4>) (tmp_fu_188_p1.read());
    } else {
        b_address0 = "XXXX";
    }
}

void foo::thread_b_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        b_address1 =  (sc_lv<4>) (tmp_3_fu_232_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        b_address1 =  (sc_lv<4>) (tmp_s_fu_204_p1.read());
    } else {
        b_address1 = "XXXX";
    }
}

void foo::thread_b_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        b_ce0 = ap_const_logic_1;
    } else {
        b_ce0 = ap_const_logic_0;
    }
}

void foo::thread_b_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        b_ce1 = ap_const_logic_1;
    } else {
        b_ce1 = ap_const_logic_0;
    }
}

void foo::thread_c_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        c_address0 =  (sc_lv<4>) (tmp_2_fu_221_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        c_address0 =  (sc_lv<4>) (tmp_fu_188_p1.read());
    } else {
        c_address0 = "XXXX";
    }
}

void foo::thread_c_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        c_address1 =  (sc_lv<4>) (tmp_3_fu_232_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        c_address1 =  (sc_lv<4>) (tmp_s_fu_204_p1.read());
    } else {
        c_address1 = "XXXX";
    }
}

void foo::thread_c_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        c_ce0 = ap_const_logic_1;
    } else {
        c_ce0 = ap_const_logic_0;
    }
}

void foo::thread_c_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        c_ce1 = ap_const_logic_1;
    } else {
        c_ce1 = ap_const_logic_0;
    }
}

void foo::thread_exitcond_fu_182_p2() {
    exitcond_fu_182_p2 = (!i_reg_157.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_157.read() == ap_const_lv5_10);
}

void foo::thread_i_1_1_fu_216_p2() {
    i_1_1_fu_216_p2 = (tmp_4_reg_256.read() | ap_const_lv4_2);
}

void foo::thread_i_1_2_fu_227_p2() {
    i_1_2_fu_227_p2 = (tmp_4_reg_256.read() | ap_const_lv4_3);
}

void foo::thread_i_1_3_fu_210_p2() {
    i_1_3_fu_210_p2 = (!ap_const_lv5_4.is_01() || !i_reg_157.read().is_01())? sc_lv<5>(): (sc_biguint<5>(ap_const_lv5_4) + sc_biguint<5>(i_reg_157.read()));
}

void foo::thread_i_1_s_fu_198_p2() {
    i_1_s_fu_198_p2 = (tmp_4_fu_194_p1.read() | ap_const_lv4_1);
}

void foo::thread_tmp_2_fu_221_p1() {
    tmp_2_fu_221_p1 = esl_zext<64,4>(i_1_1_fu_216_p2.read());
}

void foo::thread_tmp_3_fu_232_p1() {
    tmp_3_fu_232_p1 = esl_zext<64,4>(i_1_2_fu_227_p2.read());
}

void foo::thread_tmp_4_fu_194_p1() {
    tmp_4_fu_194_p1 = i_reg_157.read().range(4-1, 0);
}

void foo::thread_tmp_fu_188_p1() {
    tmp_fu_188_p1 = esl_zext<64,5>(i_reg_157.read());
}

void foo::thread_tmp_s_fu_204_p1() {
    tmp_s_fu_204_p1 = esl_zext<64,4>(i_1_s_fu_198_p2.read());
}

void foo::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond_fu_182_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void foo::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_address0\" :  \"" << a_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_ce0\" :  \"" << a_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_we0\" :  \"" << a_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_d0\" :  \"" << a_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_address1\" :  \"" << a_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_ce1\" :  \"" << a_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_we1\" :  \"" << a_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_d1\" :  \"" << a_d1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_address0\" :  \"" << b_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_ce0\" :  \"" << b_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_q0\" :  \"" << b_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_address1\" :  \"" << b_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_ce1\" :  \"" << b_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_q1\" :  \"" << b_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_address0\" :  \"" << c_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_ce0\" :  \"" << c_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"c_q0\" :  \"" << c_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_address1\" :  \"" << c_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_ce1\" :  \"" << c_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"c_q1\" :  \"" << c_q1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

