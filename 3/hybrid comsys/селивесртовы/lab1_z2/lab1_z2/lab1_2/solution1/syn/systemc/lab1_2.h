// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _lab1_2_HH_
#define _lab1_2_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "lab1_2_mul_32s_8sbkb.h"

namespace ap_rtl {

struct lab1_2 : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<2> > in_r_address0;
    sc_out< sc_logic > in_r_ce0;
    sc_in< sc_lv<32> > in_r_q0;
    sc_in< sc_lv<8> > a;
    sc_in< sc_lv<8> > b;
    sc_in< sc_lv<8> > c;
    sc_out< sc_lv<2> > out_r_address0;
    sc_out< sc_logic > out_r_ce0;
    sc_out< sc_logic > out_r_we0;
    sc_out< sc_lv<32> > out_r_d0;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    lab1_2(sc_module_name name);
    SC_HAS_PROCESS(lab1_2);

    ~lab1_2();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    lab1_2_mul_32s_8sbkb<1,3,32,8,32>* lab1_2_mul_32s_8sbkb_U1;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > sext_ln5_fu_85_p1;
    sc_signal< sc_lv<32> > sext_ln5_reg_133;
    sc_signal< sc_lv<32> > sext_ln5_2_fu_103_p1;
    sc_signal< sc_lv<32> > sext_ln5_2_reg_138;
    sc_signal< sc_lv<2> > i_fu_113_p2;
    sc_signal< sc_lv<2> > i_reg_146;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > zext_ln4_fu_119_p1;
    sc_signal< sc_lv<64> > zext_ln4_reg_151;
    sc_signal< sc_lv<1> > icmp_ln3_fu_107_p2;
    sc_signal< sc_lv<32> > x_reg_161;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > grp_fu_124_p2;
    sc_signal< sc_lv<32> > mul_ln5_reg_166;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<2> > i_0_reg_74;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<9> > sext_ln5_1_fu_89_p1;
    sc_signal< sc_lv<9> > sext_ln3_fu_93_p1;
    sc_signal< sc_lv<9> > add_ln5_fu_97_p2;
    sc_signal< sc_lv<8> > grp_fu_124_p1;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln5_fu_97_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_fu_124_p1();
    void thread_i_fu_113_p2();
    void thread_icmp_ln3_fu_107_p2();
    void thread_in_r_address0();
    void thread_in_r_ce0();
    void thread_out_r_address0();
    void thread_out_r_ce0();
    void thread_out_r_d0();
    void thread_out_r_we0();
    void thread_sext_ln3_fu_93_p1();
    void thread_sext_ln5_1_fu_89_p1();
    void thread_sext_ln5_2_fu_103_p1();
    void thread_sext_ln5_fu_85_p1();
    void thread_zext_ln4_fu_119_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
