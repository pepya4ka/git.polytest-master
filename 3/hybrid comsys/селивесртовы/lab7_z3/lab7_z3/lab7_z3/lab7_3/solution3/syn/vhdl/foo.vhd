-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity foo is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in1 : IN STD_LOGIC_VECTOR (31 downto 0);
    in2 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_data : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_data_ap_vld : OUT STD_LOGIC );
end;


architecture behav of foo is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "foo,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.169000,HLS_SYN_LAT=9,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=103,HLS_SYN_LUT=140,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal accum : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal i_fu_177_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_phi_mux_do_init_phi_fu_75_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal do_init_reg_71 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_in12_phi_phi_fu_132_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal in12_rewind_reg_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_in23_phi_phi_fu_145_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal in23_rewind_reg_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_01_reg_114 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln5_1_fu_164_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln5_fu_158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    do_init_reg_71_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln4_fu_183_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                do_init_reg_71 <= ap_const_lv1_0;
            elsif ((((ap_start = ap_const_logic_1) and (icmp_ln4_fu_183_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                do_init_reg_71 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    i_01_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln4_fu_183_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_01_reg_114 <= i_fu_177_p2;
            elsif ((((ap_start = ap_const_logic_1) and (icmp_ln4_fu_183_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                i_01_reg_114 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                accum <= add_ln5_1_fu_164_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln4_fu_183_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                in12_rewind_reg_86 <= ap_phi_mux_in12_phi_phi_fu_132_p4;
                in23_rewind_reg_100 <= ap_phi_mux_in23_phi_phi_fu_145_p4;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln4_fu_183_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_start = ap_const_logic_1) and (icmp_ln4_fu_183_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln5_1_fu_164_p2 <= std_logic_vector(unsigned(add_ln5_fu_158_p2) + unsigned(accum));
    add_ln5_fu_158_p2 <= std_logic_vector(unsigned(ap_phi_mux_in23_phi_phi_fu_145_p4) + unsigned(ap_phi_mux_in12_phi_phi_fu_132_p4));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state2, icmp_ln4_fu_183_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (icmp_ln4_fu_183_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_do_init_phi_fu_75_p6 <= do_init_reg_71;

    ap_phi_mux_in12_phi_phi_fu_132_p4_assign_proc : process(in1, ap_CS_fsm_state2, ap_phi_mux_do_init_phi_fu_75_p6, in12_rewind_reg_86)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
            if ((ap_phi_mux_do_init_phi_fu_75_p6 = ap_const_lv1_0)) then 
                ap_phi_mux_in12_phi_phi_fu_132_p4 <= in12_rewind_reg_86;
            elsif ((ap_phi_mux_do_init_phi_fu_75_p6 = ap_const_lv1_1)) then 
                ap_phi_mux_in12_phi_phi_fu_132_p4 <= in1;
            else 
                ap_phi_mux_in12_phi_phi_fu_132_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_in12_phi_phi_fu_132_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_in23_phi_phi_fu_145_p4_assign_proc : process(in2, ap_CS_fsm_state2, ap_phi_mux_do_init_phi_fu_75_p6, in23_rewind_reg_100)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
            if ((ap_phi_mux_do_init_phi_fu_75_p6 = ap_const_lv1_0)) then 
                ap_phi_mux_in23_phi_phi_fu_145_p4 <= in23_rewind_reg_100;
            elsif ((ap_phi_mux_do_init_phi_fu_75_p6 = ap_const_lv1_1)) then 
                ap_phi_mux_in23_phi_phi_fu_145_p4 <= in2;
            else 
                ap_phi_mux_in23_phi_phi_fu_145_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_in23_phi_phi_fu_145_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state2, icmp_ln4_fu_183_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (icmp_ln4_fu_183_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_177_p2 <= std_logic_vector(unsigned(i_01_reg_114) + unsigned(ap_const_lv4_1));
    icmp_ln4_fu_183_p2 <= "1" when (i_01_reg_114 = ap_const_lv4_9) else "0";
    out_data <= std_logic_vector(unsigned(add_ln5_fu_158_p2) + unsigned(accum));

    out_data_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state2, icmp_ln4_fu_183_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (icmp_ln4_fu_183_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_data_ap_vld <= ap_const_logic_1;
        else 
            out_data_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
