// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="foo,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.169000,HLS_SYN_LAT=9,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=103,HLS_SYN_LUT=140,HLS_VERSION=2019_1}" *)

module foo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in1,
        in2,
        out_data,
        out_data_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in1;
input  [31:0] in2;
output  [31:0] out_data;
output   out_data_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_data_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] accum;
wire   [3:0] i_fu_177_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] ap_phi_mux_do_init_phi_fu_75_p6;
reg   [0:0] do_init_reg_71;
wire   [0:0] icmp_ln4_fu_183_p2;
reg   [31:0] ap_phi_mux_in12_phi_phi_fu_132_p4;
reg   [31:0] in12_rewind_reg_86;
reg   [31:0] ap_phi_mux_in23_phi_phi_fu_145_p4;
reg   [31:0] in23_rewind_reg_100;
reg   [3:0] i_01_reg_114;
wire   [31:0] add_ln5_1_fu_164_p2;
wire   [31:0] add_ln5_fu_158_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 accum = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln4_fu_183_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        do_init_reg_71 <= 1'd0;
    end else if ((((ap_start == 1'b1) & (icmp_ln4_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        do_init_reg_71 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln4_fu_183_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_01_reg_114 <= i_fu_177_p2;
    end else if ((((ap_start == 1'b1) & (icmp_ln4_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        i_01_reg_114 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        accum <= add_ln5_1_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln4_fu_183_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in12_rewind_reg_86 <= ap_phi_mux_in12_phi_phi_fu_132_p4;
        in23_rewind_reg_100 <= ap_phi_mux_in23_phi_phi_fu_145_p4;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (icmp_ln4_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((ap_phi_mux_do_init_phi_fu_75_p6 == 1'd0)) begin
            ap_phi_mux_in12_phi_phi_fu_132_p4 = in12_rewind_reg_86;
        end else if ((ap_phi_mux_do_init_phi_fu_75_p6 == 1'd1)) begin
            ap_phi_mux_in12_phi_phi_fu_132_p4 = in1;
        end else begin
            ap_phi_mux_in12_phi_phi_fu_132_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_in12_phi_phi_fu_132_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((ap_phi_mux_do_init_phi_fu_75_p6 == 1'd0)) begin
            ap_phi_mux_in23_phi_phi_fu_145_p4 = in23_rewind_reg_100;
        end else if ((ap_phi_mux_do_init_phi_fu_75_p6 == 1'd1)) begin
            ap_phi_mux_in23_phi_phi_fu_145_p4 = in2;
        end else begin
            ap_phi_mux_in23_phi_phi_fu_145_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_in23_phi_phi_fu_145_p4 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (icmp_ln4_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (icmp_ln4_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_data_ap_vld = 1'b1;
    end else begin
        out_data_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_start == 1'b1) & (icmp_ln4_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln5_1_fu_164_p2 = (add_ln5_fu_158_p2 + accum);

assign add_ln5_fu_158_p2 = (ap_phi_mux_in23_phi_phi_fu_145_p4 + ap_phi_mux_in12_phi_phi_fu_132_p4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_phi_mux_do_init_phi_fu_75_p6 = do_init_reg_71;

assign i_fu_177_p2 = (i_01_reg_114 + 4'd1);

assign icmp_ln4_fu_183_p2 = ((i_01_reg_114 == 4'd9) ? 1'b1 : 1'b0);

assign out_data = (add_ln5_fu_158_p2 + accum);

endmodule //foo
