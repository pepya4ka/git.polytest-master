// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "foo.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic foo::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic foo::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> foo::ap_ST_fsm_state1 = "1";
const sc_lv<2> foo::ap_ST_fsm_state2 = "10";
const sc_lv<32> foo::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> foo::ap_const_lv32_1 = "1";
const sc_lv<1> foo::ap_const_lv1_1 = "1";
const sc_lv<1> foo::ap_const_lv1_0 = "0";
const sc_lv<4> foo::ap_const_lv4_0 = "0000";
const sc_lv<4> foo::ap_const_lv4_1 = "1";
const sc_lv<4> foo::ap_const_lv4_9 = "1001";
const bool foo::ap_const_boolean_1 = true;

foo::foo(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln5_1_fu_164_p2);
    sensitive << ( accum );
    sensitive << ( add_ln5_fu_158_p2 );

    SC_METHOD(thread_add_ln5_fu_158_p2);
    sensitive << ( ap_phi_mux_in12_phi_phi_fu_132_p4 );
    sensitive << ( ap_phi_mux_in23_phi_phi_fu_145_p4 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln4_fu_183_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_do_init_phi_fu_75_p6);
    sensitive << ( do_init_reg_71 );

    SC_METHOD(thread_ap_phi_mux_in12_phi_phi_fu_132_p4);
    sensitive << ( in1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_phi_mux_do_init_phi_fu_75_p6 );
    sensitive << ( in12_rewind_reg_86 );

    SC_METHOD(thread_ap_phi_mux_in23_phi_phi_fu_145_p4);
    sensitive << ( in2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_phi_mux_do_init_phi_fu_75_p6 );
    sensitive << ( in23_rewind_reg_100 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln4_fu_183_p2 );

    SC_METHOD(thread_i_fu_177_p2);
    sensitive << ( i_01_reg_114 );

    SC_METHOD(thread_icmp_ln4_fu_183_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_01_reg_114 );

    SC_METHOD(thread_out_data);
    sensitive << ( ap_start );
    sensitive << ( accum );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln4_fu_183_p2 );
    sensitive << ( add_ln5_fu_158_p2 );

    SC_METHOD(thread_out_data_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln4_fu_183_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln4_fu_183_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    accum = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "foo_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in1, "(port)in1");
    sc_trace(mVcdFile, in2, "(port)in2");
    sc_trace(mVcdFile, out_data, "(port)out_data");
    sc_trace(mVcdFile, out_data_ap_vld, "(port)out_data_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, accum, "accum");
    sc_trace(mVcdFile, i_fu_177_p2, "i_fu_177_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_phi_mux_do_init_phi_fu_75_p6, "ap_phi_mux_do_init_phi_fu_75_p6");
    sc_trace(mVcdFile, do_init_reg_71, "do_init_reg_71");
    sc_trace(mVcdFile, icmp_ln4_fu_183_p2, "icmp_ln4_fu_183_p2");
    sc_trace(mVcdFile, ap_phi_mux_in12_phi_phi_fu_132_p4, "ap_phi_mux_in12_phi_phi_fu_132_p4");
    sc_trace(mVcdFile, in12_rewind_reg_86, "in12_rewind_reg_86");
    sc_trace(mVcdFile, ap_phi_mux_in23_phi_phi_fu_145_p4, "ap_phi_mux_in23_phi_phi_fu_145_p4");
    sc_trace(mVcdFile, in23_rewind_reg_100, "in23_rewind_reg_100");
    sc_trace(mVcdFile, i_01_reg_114, "i_01_reg_114");
    sc_trace(mVcdFile, add_ln5_1_fu_164_p2, "add_ln5_1_fu_164_p2");
    sc_trace(mVcdFile, add_ln5_fu_158_p2, "add_ln5_fu_158_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("foo.hdltvin.dat");
    mHdltvoutHandle.open("foo.hdltvout.dat");
}

foo::~foo() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void foo::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln4_fu_183_p2.read()))) {
        do_init_reg_71 = ap_const_lv1_0;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln4_fu_183_p2.read())))) {
        do_init_reg_71 = ap_const_lv1_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln4_fu_183_p2.read()))) {
        i_01_reg_114 = i_fu_177_p2.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                 esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln4_fu_183_p2.read())))) {
        i_01_reg_114 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        accum = add_ln5_1_fu_164_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln4_fu_183_p2.read()))) {
        in12_rewind_reg_86 = ap_phi_mux_in12_phi_phi_fu_132_p4.read();
        in23_rewind_reg_100 = ap_phi_mux_in23_phi_phi_fu_145_p4.read();
    }
}

void foo::thread_add_ln5_1_fu_164_p2() {
    add_ln5_1_fu_164_p2 = (!add_ln5_fu_158_p2.read().is_01() || !accum.read().is_01())? sc_lv<32>(): (sc_biguint<32>(add_ln5_fu_158_p2.read()) + sc_biguint<32>(accum.read()));
}

void foo::thread_add_ln5_fu_158_p2() {
    add_ln5_fu_158_p2 = (!ap_phi_mux_in23_phi_phi_fu_145_p4.read().is_01() || !ap_phi_mux_in12_phi_phi_fu_132_p4.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_phi_mux_in23_phi_phi_fu_145_p4.read()) + sc_biguint<32>(ap_phi_mux_in12_phi_phi_fu_132_p4.read()));
}

void foo::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void foo::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void foo::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln4_fu_183_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void foo::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void foo::thread_ap_phi_mux_do_init_phi_fu_75_p6() {
    ap_phi_mux_do_init_phi_fu_75_p6 = do_init_reg_71.read();
}

void foo::thread_ap_phi_mux_in12_phi_phi_fu_132_p4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        if (esl_seteq<1,1,1>(ap_phi_mux_do_init_phi_fu_75_p6.read(), ap_const_lv1_0)) {
            ap_phi_mux_in12_phi_phi_fu_132_p4 = in12_rewind_reg_86.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_phi_mux_do_init_phi_fu_75_p6.read())) {
            ap_phi_mux_in12_phi_phi_fu_132_p4 = in1.read();
        } else {
            ap_phi_mux_in12_phi_phi_fu_132_p4 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        ap_phi_mux_in12_phi_phi_fu_132_p4 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void foo::thread_ap_phi_mux_in23_phi_phi_fu_145_p4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        if (esl_seteq<1,1,1>(ap_phi_mux_do_init_phi_fu_75_p6.read(), ap_const_lv1_0)) {
            ap_phi_mux_in23_phi_phi_fu_145_p4 = in23_rewind_reg_100.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_phi_mux_do_init_phi_fu_75_p6.read())) {
            ap_phi_mux_in23_phi_phi_fu_145_p4 = in2.read();
        } else {
            ap_phi_mux_in23_phi_phi_fu_145_p4 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        ap_phi_mux_in23_phi_phi_fu_145_p4 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void foo::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln4_fu_183_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void foo::thread_i_fu_177_p2() {
    i_fu_177_p2 = (!i_01_reg_114.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_01_reg_114.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void foo::thread_icmp_ln4_fu_183_p2() {
    icmp_ln4_fu_183_p2 = (!i_01_reg_114.read().is_01() || !ap_const_lv4_9.is_01())? sc_lv<1>(): sc_lv<1>(i_01_reg_114.read() == ap_const_lv4_9);
}

void foo::thread_out_data() {
    out_data = (!add_ln5_fu_158_p2.read().is_01() || !accum.read().is_01())? sc_lv<32>(): (sc_biguint<32>(add_ln5_fu_158_p2.read()) + sc_biguint<32>(accum.read()));
}

void foo::thread_out_data_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln4_fu_183_p2.read()))) {
        out_data_ap_vld = ap_const_logic_1;
    } else {
        out_data_ap_vld = ap_const_logic_0;
    }
}

void foo::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln4_fu_183_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<2>) ("XX");
            break;
    }
}

void foo::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in1\" :  \"" << in1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in2\" :  \"" << in2.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data\" :  \"" << out_data.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_data_ap_vld\" :  \"" << out_data_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

