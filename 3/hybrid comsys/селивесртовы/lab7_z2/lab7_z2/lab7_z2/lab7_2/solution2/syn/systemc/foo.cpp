// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "foo.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic foo::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic foo::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> foo::ap_ST_fsm_state1 = "1";
const sc_lv<3> foo::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> foo::ap_ST_fsm_state4 = "100";
const sc_lv<32> foo::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool foo::ap_const_boolean_1 = true;
const sc_lv<32> foo::ap_const_lv32_1 = "1";
const bool foo::ap_const_boolean_0 = false;
const sc_lv<1> foo::ap_const_lv1_0 = "0";
const sc_lv<1> foo::ap_const_lv1_1 = "1";
const sc_lv<7> foo::ap_const_lv7_0 = "0000000";
const sc_lv<4> foo::ap_const_lv4_0 = "0000";
const sc_lv<7> foo::ap_const_lv7_64 = "1100100";
const sc_lv<7> foo::ap_const_lv7_1 = "1";
const sc_lv<4> foo::ap_const_lv4_1 = "1";
const sc_lv<4> foo::ap_const_lv4_A = "1010";
const sc_lv<3> foo::ap_const_lv3_0 = "000";
const sc_lv<32> foo::ap_const_lv32_2 = "10";

foo::foo(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln3_fu_136_p2);
    sensitive << ( indvar_flatten_reg_97 );

    SC_METHOD(thread_add_ln5_1_fu_194_p2);
    sensitive << ( zext_ln5_1_fu_190_p1 );
    sensitive << ( zext_ln5_fu_178_p1 );

    SC_METHOD(thread_add_ln5_2_fu_204_p2);
    sensitive << ( add_ln5_1_fu_194_p2 );
    sensitive << ( zext_ln5_2_fu_200_p1 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln3_fu_130_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_i_0_phi_fu_112_p4);
    sensitive << ( i_0_reg_108 );
    sensitive << ( icmp_ln3_reg_229 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( select_ln5_1_reg_238 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_i_fu_142_p2);
    sensitive << ( ap_phi_mux_i_0_phi_fu_112_p4 );

    SC_METHOD(thread_icmp_ln3_fu_130_p2);
    sensitive << ( indvar_flatten_reg_97 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_icmp_ln4_fu_148_p2);
    sensitive << ( j_0_reg_119 );
    sensitive << ( icmp_ln3_fu_130_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_in1_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln5_3_fu_210_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_in1_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_in2_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln5_3_fu_210_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_in2_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_j_fu_216_p2);
    sensitive << ( select_ln5_fu_154_p3 );

    SC_METHOD(thread_out_r_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( zext_ln5_3_reg_243 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_out_r_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_out_r_d0);
    sensitive << ( in1_q0 );
    sensitive << ( in2_q0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_out_r_we0);
    sensitive << ( icmp_ln3_reg_229 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_select_ln5_1_fu_162_p3);
    sensitive << ( ap_phi_mux_i_0_phi_fu_112_p4 );
    sensitive << ( icmp_ln4_fu_148_p2 );
    sensitive << ( i_fu_142_p2 );

    SC_METHOD(thread_select_ln5_fu_154_p3);
    sensitive << ( j_0_reg_119 );
    sensitive << ( icmp_ln4_fu_148_p2 );

    SC_METHOD(thread_tmp_2_fu_182_p3);
    sensitive << ( select_ln5_1_fu_162_p3 );

    SC_METHOD(thread_tmp_fu_170_p3);
    sensitive << ( select_ln5_1_fu_162_p3 );

    SC_METHOD(thread_zext_ln5_1_fu_190_p1);
    sensitive << ( tmp_2_fu_182_p3 );

    SC_METHOD(thread_zext_ln5_2_fu_200_p1);
    sensitive << ( select_ln5_fu_154_p3 );

    SC_METHOD(thread_zext_ln5_3_fu_210_p1);
    sensitive << ( add_ln5_2_fu_204_p2 );

    SC_METHOD(thread_zext_ln5_fu_178_p1);
    sensitive << ( tmp_fu_170_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln3_fu_130_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "foo_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in1_address0, "(port)in1_address0");
    sc_trace(mVcdFile, in1_ce0, "(port)in1_ce0");
    sc_trace(mVcdFile, in1_q0, "(port)in1_q0");
    sc_trace(mVcdFile, in2_address0, "(port)in2_address0");
    sc_trace(mVcdFile, in2_ce0, "(port)in2_ce0");
    sc_trace(mVcdFile, in2_q0, "(port)in2_q0");
    sc_trace(mVcdFile, out_r_address0, "(port)out_r_address0");
    sc_trace(mVcdFile, out_r_ce0, "(port)out_r_ce0");
    sc_trace(mVcdFile, out_r_we0, "(port)out_r_we0");
    sc_trace(mVcdFile, out_r_d0, "(port)out_r_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, indvar_flatten_reg_97, "indvar_flatten_reg_97");
    sc_trace(mVcdFile, i_0_reg_108, "i_0_reg_108");
    sc_trace(mVcdFile, j_0_reg_119, "j_0_reg_119");
    sc_trace(mVcdFile, icmp_ln3_fu_130_p2, "icmp_ln3_fu_130_p2");
    sc_trace(mVcdFile, icmp_ln3_reg_229, "icmp_ln3_reg_229");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, add_ln3_fu_136_p2, "add_ln3_fu_136_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, select_ln5_1_fu_162_p3, "select_ln5_1_fu_162_p3");
    sc_trace(mVcdFile, select_ln5_1_reg_238, "select_ln5_1_reg_238");
    sc_trace(mVcdFile, zext_ln5_3_fu_210_p1, "zext_ln5_3_fu_210_p1");
    sc_trace(mVcdFile, zext_ln5_3_reg_243, "zext_ln5_3_reg_243");
    sc_trace(mVcdFile, j_fu_216_p2, "j_fu_216_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_phi_mux_i_0_phi_fu_112_p4, "ap_phi_mux_i_0_phi_fu_112_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln4_fu_148_p2, "icmp_ln4_fu_148_p2");
    sc_trace(mVcdFile, i_fu_142_p2, "i_fu_142_p2");
    sc_trace(mVcdFile, tmp_fu_170_p3, "tmp_fu_170_p3");
    sc_trace(mVcdFile, tmp_2_fu_182_p3, "tmp_2_fu_182_p3");
    sc_trace(mVcdFile, zext_ln5_1_fu_190_p1, "zext_ln5_1_fu_190_p1");
    sc_trace(mVcdFile, zext_ln5_fu_178_p1, "zext_ln5_fu_178_p1");
    sc_trace(mVcdFile, select_ln5_fu_154_p3, "select_ln5_fu_154_p3");
    sc_trace(mVcdFile, add_ln5_1_fu_194_p2, "add_ln5_1_fu_194_p2");
    sc_trace(mVcdFile, zext_ln5_2_fu_200_p1, "zext_ln5_2_fu_200_p1");
    sc_trace(mVcdFile, add_ln5_2_fu_204_p2, "add_ln5_2_fu_204_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("foo.hdltvin.dat");
    mHdltvoutHandle.open("foo.hdltvout.dat");
}

foo::~foo() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void foo::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln3_reg_229.read(), ap_const_lv1_0))) {
        i_0_reg_108 = select_ln5_1_reg_238.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_108 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln3_fu_130_p2.read(), ap_const_lv1_0))) {
        indvar_flatten_reg_97 = add_ln3_fu_136_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        indvar_flatten_reg_97 = ap_const_lv7_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln3_fu_130_p2.read(), ap_const_lv1_0))) {
        j_0_reg_119 = j_fu_216_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        j_0_reg_119 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln3_reg_229 = icmp_ln3_fu_130_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(icmp_ln3_fu_130_p2.read(), ap_const_lv1_0))) {
        select_ln5_1_reg_238 = select_ln5_1_fu_162_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln3_fu_130_p2.read(), ap_const_lv1_0))) {
        zext_ln5_3_reg_243 = zext_ln5_3_fu_210_p1.read();
    }
}

void foo::thread_add_ln3_fu_136_p2() {
    add_ln3_fu_136_p2 = (!indvar_flatten_reg_97.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(indvar_flatten_reg_97.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void foo::thread_add_ln5_1_fu_194_p2() {
    add_ln5_1_fu_194_p2 = (!zext_ln5_1_fu_190_p1.read().is_01() || !zext_ln5_fu_178_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(zext_ln5_1_fu_190_p1.read()) + sc_biguint<8>(zext_ln5_fu_178_p1.read()));
}

void foo::thread_add_ln5_2_fu_204_p2() {
    add_ln5_2_fu_204_p2 = (!add_ln5_1_fu_194_p2.read().is_01() || !zext_ln5_2_fu_200_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(add_ln5_1_fu_194_p2.read()) + sc_biguint<8>(zext_ln5_2_fu_200_p1.read()));
}

void foo::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void foo::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void foo::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void foo::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void foo::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void foo::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void foo::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void foo::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void foo::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln3_fu_130_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void foo::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void foo::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void foo::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void foo::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void foo::thread_ap_phi_mux_i_0_phi_fu_112_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln3_reg_229.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_i_0_phi_fu_112_p4 = select_ln5_1_reg_238.read();
    } else {
        ap_phi_mux_i_0_phi_fu_112_p4 = i_0_reg_108.read();
    }
}

void foo::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void foo::thread_i_fu_142_p2() {
    i_fu_142_p2 = (!ap_phi_mux_i_0_phi_fu_112_p4.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(ap_phi_mux_i_0_phi_fu_112_p4.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void foo::thread_icmp_ln3_fu_130_p2() {
    icmp_ln3_fu_130_p2 = (!indvar_flatten_reg_97.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_97.read() == ap_const_lv7_64);
}

void foo::thread_icmp_ln4_fu_148_p2() {
    icmp_ln4_fu_148_p2 = (!j_0_reg_119.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_119.read() == ap_const_lv4_A);
}

void foo::thread_in1_address0() {
    in1_address0 =  (sc_lv<7>) (zext_ln5_3_fu_210_p1.read());
}

void foo::thread_in1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        in1_ce0 = ap_const_logic_1;
    } else {
        in1_ce0 = ap_const_logic_0;
    }
}

void foo::thread_in2_address0() {
    in2_address0 =  (sc_lv<7>) (zext_ln5_3_fu_210_p1.read());
}

void foo::thread_in2_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        in2_ce0 = ap_const_logic_1;
    } else {
        in2_ce0 = ap_const_logic_0;
    }
}

void foo::thread_j_fu_216_p2() {
    j_fu_216_p2 = (!select_ln5_fu_154_p3.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(select_ln5_fu_154_p3.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void foo::thread_out_r_address0() {
    out_r_address0 =  (sc_lv<7>) (zext_ln5_3_reg_243.read());
}

void foo::thread_out_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        out_r_ce0 = ap_const_logic_1;
    } else {
        out_r_ce0 = ap_const_logic_0;
    }
}

void foo::thread_out_r_d0() {
    out_r_d0 = (!in2_q0.read().is_01() || !in1_q0.read().is_01())? sc_lv<32>(): (sc_biguint<32>(in2_q0.read()) + sc_biguint<32>(in1_q0.read()));
}

void foo::thread_out_r_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln3_reg_229.read(), ap_const_lv1_0))) {
        out_r_we0 = ap_const_logic_1;
    } else {
        out_r_we0 = ap_const_logic_0;
    }
}

void foo::thread_select_ln5_1_fu_162_p3() {
    select_ln5_1_fu_162_p3 = (!icmp_ln4_fu_148_p2.read()[0].is_01())? sc_lv<4>(): ((icmp_ln4_fu_148_p2.read()[0].to_bool())? i_fu_142_p2.read(): ap_phi_mux_i_0_phi_fu_112_p4.read());
}

void foo::thread_select_ln5_fu_154_p3() {
    select_ln5_fu_154_p3 = (!icmp_ln4_fu_148_p2.read()[0].is_01())? sc_lv<4>(): ((icmp_ln4_fu_148_p2.read()[0].to_bool())? ap_const_lv4_0: j_0_reg_119.read());
}

void foo::thread_tmp_2_fu_182_p3() {
    tmp_2_fu_182_p3 = esl_concat<4,1>(select_ln5_1_fu_162_p3.read(), ap_const_lv1_0);
}

void foo::thread_tmp_fu_170_p3() {
    tmp_fu_170_p3 = esl_concat<4,3>(select_ln5_1_fu_162_p3.read(), ap_const_lv3_0);
}

void foo::thread_zext_ln5_1_fu_190_p1() {
    zext_ln5_1_fu_190_p1 = esl_zext<8,5>(tmp_2_fu_182_p3.read());
}

void foo::thread_zext_ln5_2_fu_200_p1() {
    zext_ln5_2_fu_200_p1 = esl_zext<8,4>(select_ln5_fu_154_p3.read());
}

void foo::thread_zext_ln5_3_fu_210_p1() {
    zext_ln5_3_fu_210_p1 = esl_zext<64,8>(add_ln5_2_fu_204_p2.read());
}

void foo::thread_zext_ln5_fu_178_p1() {
    zext_ln5_fu_178_p1 = esl_zext<8,7>(tmp_fu_170_p3.read());
}

void foo::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln3_fu_130_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln3_fu_130_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void foo::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in1_address0\" :  \"" << in1_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in1_ce0\" :  \"" << in1_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in1_q0\" :  \"" << in1_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in2_address0\" :  \"" << in2_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in2_ce0\" :  \"" << in2_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in2_q0\" :  \"" << in2_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_address0\" :  \"" << out_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_ce0\" :  \"" << out_r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_we0\" :  \"" << out_r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_d0\" :  \"" << out_r_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

