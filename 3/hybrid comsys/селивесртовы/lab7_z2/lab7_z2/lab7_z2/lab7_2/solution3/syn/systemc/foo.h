// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _foo_HH_
#define _foo_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct foo : public sc_module {
    // Port declarations 26
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<7> > in1_address0;
    sc_out< sc_logic > in1_ce0;
    sc_in< sc_lv<32> > in1_q0;
    sc_out< sc_lv<7> > in1_address1;
    sc_out< sc_logic > in1_ce1;
    sc_in< sc_lv<32> > in1_q1;
    sc_out< sc_lv<7> > in2_address0;
    sc_out< sc_logic > in2_ce0;
    sc_in< sc_lv<32> > in2_q0;
    sc_out< sc_lv<7> > in2_address1;
    sc_out< sc_logic > in2_ce1;
    sc_in< sc_lv<32> > in2_q1;
    sc_out< sc_lv<7> > out_r_address0;
    sc_out< sc_logic > out_r_ce0;
    sc_out< sc_logic > out_r_we0;
    sc_out< sc_lv<32> > out_r_d0;
    sc_out< sc_lv<7> > out_r_address1;
    sc_out< sc_logic > out_r_ce1;
    sc_out< sc_logic > out_r_we1;
    sc_out< sc_lv<32> > out_r_d1;


    // Module declarations
    foo(sc_module_name name);
    SC_HAS_PROCESS(foo);

    ~foo();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > i_0_reg_335;
    sc_signal< sc_lv<1> > icmp_ln3_fu_360_p2;
    sc_signal< sc_lv<1> > icmp_ln3_reg_508;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<4> > i_fu_366_p2;
    sc_signal< sc_lv<4> > i_reg_512;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<8> > add_ln5_10_fu_396_p2;
    sc_signal< sc_lv<8> > add_ln5_10_reg_517;
    sc_signal< sc_lv<64> > zext_ln5_2_fu_402_p1;
    sc_signal< sc_lv<64> > zext_ln5_2_reg_529;
    sc_signal< sc_lv<64> > zext_ln5_3_fu_414_p1;
    sc_signal< sc_lv<64> > zext_ln5_3_reg_539;
    sc_signal< sc_lv<64> > sext_ln5_fu_425_p1;
    sc_signal< sc_lv<64> > sext_ln5_reg_559;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<64> > sext_ln5_1_fu_436_p1;
    sc_signal< sc_lv<64> > sext_ln5_1_reg_569;
    sc_signal< sc_lv<64> > sext_ln5_2_fu_447_p1;
    sc_signal< sc_lv<64> > sext_ln5_2_reg_589;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< bool > ap_block_state4_pp0_stage2_iter0;
    sc_signal< bool > ap_block_pp0_stage2_11001;
    sc_signal< sc_lv<64> > sext_ln5_3_fu_458_p1;
    sc_signal< sc_lv<64> > sext_ln5_3_reg_599;
    sc_signal< sc_lv<64> > sext_ln5_4_fu_469_p1;
    sc_signal< sc_lv<64> > sext_ln5_4_reg_619;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage3;
    sc_signal< bool > ap_block_state5_pp0_stage3_iter0;
    sc_signal< bool > ap_block_pp0_stage3_11001;
    sc_signal< sc_lv<64> > sext_ln5_5_fu_480_p1;
    sc_signal< sc_lv<64> > sext_ln5_5_reg_629;
    sc_signal< sc_lv<64> > sext_ln5_6_fu_491_p1;
    sc_signal< sc_lv<64> > sext_ln5_6_reg_649;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage4;
    sc_signal< bool > ap_block_state6_pp0_stage4_iter0;
    sc_signal< bool > ap_block_pp0_stage4_11001;
    sc_signal< sc_lv<64> > sext_ln5_7_fu_502_p1;
    sc_signal< sc_lv<64> > sext_ln5_7_reg_659;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage4_subdone;
    sc_signal< sc_lv<4> > ap_phi_mux_i_0_phi_fu_339_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< bool > ap_block_pp0_stage2;
    sc_signal< bool > ap_block_pp0_stage3;
    sc_signal< bool > ap_block_pp0_stage4;
    sc_signal< sc_lv<7> > tmp_1_fu_372_p3;
    sc_signal< sc_lv<5> > tmp_2_fu_384_p3;
    sc_signal< sc_lv<8> > zext_ln5_1_fu_392_p1;
    sc_signal< sc_lv<8> > zext_ln5_fu_380_p1;
    sc_signal< sc_lv<8> > or_ln5_fu_408_p2;
    sc_signal< sc_lv<8> > add_ln5_11_fu_420_p2;
    sc_signal< sc_lv<8> > add_ln5_12_fu_431_p2;
    sc_signal< sc_lv<8> > add_ln5_13_fu_442_p2;
    sc_signal< sc_lv<8> > add_ln5_14_fu_453_p2;
    sc_signal< sc_lv<8> > add_ln5_15_fu_464_p2;
    sc_signal< sc_lv<8> > add_ln5_16_fu_475_p2;
    sc_signal< sc_lv<8> > add_ln5_17_fu_486_p2;
    sc_signal< sc_lv<8> > add_ln5_18_fu_497_p2;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< bool > ap_block_pp0_stage2_subdone;
    sc_signal< bool > ap_block_pp0_stage3_subdone;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_pp0_stage0;
    static const sc_lv<7> ap_ST_fsm_pp0_stage1;
    static const sc_lv<7> ap_ST_fsm_pp0_stage2;
    static const sc_lv<7> ap_ST_fsm_pp0_stage3;
    static const sc_lv<7> ap_ST_fsm_pp0_stage4;
    static const sc_lv<7> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<8> ap_const_lv8_2;
    static const sc_lv<8> ap_const_lv8_3;
    static const sc_lv<8> ap_const_lv8_4;
    static const sc_lv<8> ap_const_lv8_5;
    static const sc_lv<8> ap_const_lv8_6;
    static const sc_lv<8> ap_const_lv8_7;
    static const sc_lv<8> ap_const_lv8_8;
    static const sc_lv<8> ap_const_lv8_9;
    static const sc_lv<32> ap_const_lv32_6;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln5_10_fu_396_p2();
    void thread_add_ln5_11_fu_420_p2();
    void thread_add_ln5_12_fu_431_p2();
    void thread_add_ln5_13_fu_442_p2();
    void thread_add_ln5_14_fu_453_p2();
    void thread_add_ln5_15_fu_464_p2();
    void thread_add_ln5_16_fu_475_p2();
    void thread_add_ln5_17_fu_486_p2();
    void thread_add_ln5_18_fu_497_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_CS_fsm_pp0_stage3();
    void thread_ap_CS_fsm_pp0_stage4();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp0_stage2();
    void thread_ap_block_pp0_stage2_11001();
    void thread_ap_block_pp0_stage2_subdone();
    void thread_ap_block_pp0_stage3();
    void thread_ap_block_pp0_stage3_11001();
    void thread_ap_block_pp0_stage3_subdone();
    void thread_ap_block_pp0_stage4();
    void thread_ap_block_pp0_stage4_11001();
    void thread_ap_block_pp0_stage4_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage2_iter0();
    void thread_ap_block_state5_pp0_stage3_iter0();
    void thread_ap_block_state6_pp0_stage4_iter0();
    void thread_ap_block_state7_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_0_phi_fu_339_p4();
    void thread_ap_ready();
    void thread_i_fu_366_p2();
    void thread_icmp_ln3_fu_360_p2();
    void thread_in1_address0();
    void thread_in1_address1();
    void thread_in1_ce0();
    void thread_in1_ce1();
    void thread_in2_address0();
    void thread_in2_address1();
    void thread_in2_ce0();
    void thread_in2_ce1();
    void thread_or_ln5_fu_408_p2();
    void thread_out_r_address0();
    void thread_out_r_address1();
    void thread_out_r_ce0();
    void thread_out_r_ce1();
    void thread_out_r_d0();
    void thread_out_r_d1();
    void thread_out_r_we0();
    void thread_out_r_we1();
    void thread_sext_ln5_1_fu_436_p1();
    void thread_sext_ln5_2_fu_447_p1();
    void thread_sext_ln5_3_fu_458_p1();
    void thread_sext_ln5_4_fu_469_p1();
    void thread_sext_ln5_5_fu_480_p1();
    void thread_sext_ln5_6_fu_491_p1();
    void thread_sext_ln5_7_fu_502_p1();
    void thread_sext_ln5_fu_425_p1();
    void thread_tmp_1_fu_372_p3();
    void thread_tmp_2_fu_384_p3();
    void thread_zext_ln5_1_fu_392_p1();
    void thread_zext_ln5_2_fu_402_p1();
    void thread_zext_ln5_3_fu_414_p1();
    void thread_zext_ln5_fu_380_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
