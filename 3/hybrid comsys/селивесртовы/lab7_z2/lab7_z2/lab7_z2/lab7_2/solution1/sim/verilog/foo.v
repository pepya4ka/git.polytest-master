// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="foo,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12t-csg325-1Q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.216000,HLS_SYN_LAT=221,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=35,HLS_SYN_LUT=158,HLS_VERSION=2019_1}" *)

module foo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in1_address0,
        in1_ce0,
        in1_q0,
        in2_address0,
        in2_ce0,
        in2_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] in1_address0;
output   in1_ce0;
input  [31:0] in1_q0;
output  [6:0] in2_address0;
output   in2_ce0;
input  [31:0] in2_q0;
output  [6:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in1_ce0;
reg in2_ce0;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_fu_109_p2;
reg   [3:0] i_reg_182;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln5_1_fu_139_p2;
reg   [7:0] add_ln5_1_reg_187;
wire   [0:0] icmp_ln3_fu_103_p2;
wire   [3:0] j_fu_151_p2;
reg   [3:0] j_reg_195;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln5_3_fu_166_p1;
reg   [63:0] zext_ln5_3_reg_200;
wire   [0:0] icmp_ln4_fu_145_p2;
reg   [3:0] i_0_reg_81;
reg   [3:0] j_0_reg_92;
wire    ap_CS_fsm_state4;
wire   [6:0] tmp_1_fu_115_p3;
wire   [4:0] tmp_2_fu_127_p3;
wire   [7:0] zext_ln5_1_fu_135_p1;
wire   [7:0] zext_ln5_fu_123_p1;
wire   [7:0] zext_ln5_2_fu_157_p1;
wire   [7:0] add_ln5_2_fu_161_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln4_fu_145_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_81 <= i_reg_182;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_81 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_92 <= j_reg_195;
    end else if (((icmp_ln3_fu_103_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_92 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln3_fu_103_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln5_1_reg_187[7 : 1] <= add_ln5_1_fu_139_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_182 <= i_fu_109_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_195 <= j_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln4_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln5_3_reg_200[7 : 0] <= zext_ln5_3_fu_166_p1[7 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln3_fu_103_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln3_fu_103_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in1_ce0 = 1'b1;
    end else begin
        in1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in2_ce0 = 1'b1;
    end else begin
        in2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln3_fu_103_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln4_fu_145_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln5_1_fu_139_p2 = (zext_ln5_1_fu_135_p1 + zext_ln5_fu_123_p1);

assign add_ln5_2_fu_161_p2 = (add_ln5_1_reg_187 + zext_ln5_2_fu_157_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign i_fu_109_p2 = (i_0_reg_81 + 4'd1);

assign icmp_ln3_fu_103_p2 = ((i_0_reg_81 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln4_fu_145_p2 = ((j_0_reg_92 == 4'd10) ? 1'b1 : 1'b0);

assign in1_address0 = zext_ln5_3_fu_166_p1;

assign in2_address0 = zext_ln5_3_fu_166_p1;

assign j_fu_151_p2 = (j_0_reg_92 + 4'd1);

assign out_r_address0 = zext_ln5_3_reg_200;

assign out_r_d0 = (in2_q0 + in1_q0);

assign tmp_1_fu_115_p3 = {{i_0_reg_81}, {3'd0}};

assign tmp_2_fu_127_p3 = {{i_0_reg_81}, {1'd0}};

assign zext_ln5_1_fu_135_p1 = tmp_2_fu_127_p3;

assign zext_ln5_2_fu_157_p1 = j_0_reg_92;

assign zext_ln5_3_fu_166_p1 = add_ln5_2_fu_161_p2;

assign zext_ln5_fu_123_p1 = tmp_1_fu_115_p3;

always @ (posedge ap_clk) begin
    add_ln5_1_reg_187[0] <= 1'b0;
    zext_ln5_3_reg_200[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //foo
